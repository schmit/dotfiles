(package-initialize)

(require 'package)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)

;; Bootstrap use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))


;;;;;;;;;;;;;;;;;;;;
;;    PACKAGES    ;;
;;;;;;;;;;;;;;;;;;;;

;; HELM

;; required for helm
(use-package helm
  :ensure t
  :config
  (helm-mode 1))

;; bing helm to M-x
(global-set-key (kbd "M-x") 'helm-M-x)

;; use helm-mini
;; (global-set-key (kbd "C-x b") 'helm-mini)

;; use helm-kill-ring
;; (global-set-key (kbd "M-y") 'helm-show-kill-ring)

;; helm find-files
;; (global-set-key (kbd "C-x C-f") 'helm-find-files)


;; Ace window to switch windows easily
(use-package ace-window
  :ensure t
  :defer t
  :init
  (progn
    (global-set-key (kbd "M-o") 'ace-window)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
     ;;more info at https://github.com/abo-abo/ace-window
    )
  )

;; VIM

;; vim mode
(use-package evil
  :ensure t ;; install the evil package if not installed
  :init ;; tweak evil's configuration before loading it
  (setq evil-search-module 'evil-search)
  (setq evil-ex-complete-emacs-commands nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-shift-round nil)
  (setq evil-want-C-u-scroll t)
  :config ;; tweak evil after loading it
  (evil-mode))


(use-package evil-surround
  :ensure t
  :commands gloabl-evil-surround-mode
  :config
  (global-evil-surround-mode 1))

;; MAGIT

(use-package magit
  :ensure t)

;; use C-x g to open git status
(global-set-key (kbd "C-c g") 'magit-status)


;; ORG MODE
(use-package org
  :ensure t)

;; paredit
(use-package paredit
  :ensure t
  :diminish paredit-mode
  :commands paredit-mode)

;; Projectile
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
  (projectile-mode +1))

(use-package helm-projectile
  :ensure t)

;; solarized color scheme
(use-package solarized-theme
  :ensure t
  :config
  (progn (load-theme 'solarized-dark t)))

;; forec emacs to use the same path as shell
(use-package exec-path-from-shell
  :ensure t)

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

